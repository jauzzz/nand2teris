// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int buffer_len;
    field Array str_len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let buffer = Array.new(maxLength);
        let buffer_len = maxLength;
        let str_len = 0;
        
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(buffer);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return str_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (str_len < buffer_len) {
            let buffer[str_len] = c;
            let str_len = str_len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (str_len > 0) {
            let str_len = str_len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int int_val;
        var int i;
        var boolean neg;
        
        let int_val = 0;
        
        if( (str_len > 0) & (buffer[0] = 45) ) {
            let neg = true;
            let i = 1;
        }
        else {
            let neg = false;
            let i = 0;
        }
        
        while( (i < str_len) & String.is_digit(buffer[i]) ) {
            let int_val = (int_val * 10) + String.digit_val(buffer[i]);
            let i = i + 1;
        }
        
        if( neg ) {
            return -int_val;
        }
        else {
            return int_val;
        }
    }

    function boolean is_digit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    function char digit_val(char c) {
        return c - 48;
    }

    function char digit_char(int i) {
        return i + 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let str_len = 0;    // Clear string
        
        if( val < 0 ) {
            let val = -val;
            do appendChar(45);      // leading '-'
        }
        
        do do_set_int(val);
        return;
    }

    method void do_set_int(int val){
        var int q;
        var int mod;
        var char c;
        
        let q = val / 10;
        let mod = val - (q*10);
        let c = String.digit_char(mod);
        
        if( val < 10 ) {
            do appendChar(c);
        }
        else {
            do do_set_int(q);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
